{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/antr9/Desktop/studypal-master/frontend/src/util/route_util.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, withRouter } from 'react-router-dom'; //passed in from parent component or from mapStateToProps\n\nconst Auth = ({\n  component: Component,\n  path,\n  loggedIn,\n  exact\n}) => React.createElement(Route, {\n  path: path,\n  exact: exact,\n  render: props => !loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })) : //Redirect to some page if user if authenticated\n  React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n});\n\nconst Protected = ({\n  component: Component,\n  loggedIn,\n  ...rest\n}) => React.createElement(Route, Object.assign({}, rest, {\n  render: props => loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  })) : //Redirect to the login page if user is already authenticated\n  React.createElement(Redirect, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}));\n\nconst NavBarRedir = ({\n  component: Component,\n  loggedIn,\n  ...rest\n}) => React.createElement(Route, Object.assign({}, rest, {\n  render: props => loggedIn ? React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })) : //Redirect to the login page if user is already authenticated\n  React.createElement(Redirect, {\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n})); //Use the isAuthenticated slice of state to determine whether a user is \n//logged in \n\n\nconst mapStateToProps = state => ({\n  loggedIn: state.session.isAuthenticated\n});\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));\nexport const NavBarRedirect = withRouter(connect(mapStateToProps)(NavBarRedir));","map":{"version":3,"sources":["/mnt/c/Users/antr9/Desktop/studypal-master/frontend/src/util/route_util.js"],"names":["React","connect","Route","Redirect","withRouter","Auth","component","Component","path","loggedIn","exact","props","Protected","rest","NavBarRedir","mapStateToProps","state","session","isAuthenticated","AuthRoute","ProtectedRoute","NavBarRedirect"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,KAAR,EAAeC,QAAf,EAAyBC,UAAzB,QAA0C,kBAA1C,C,CAEA;;AACA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,SAAS,EAAEC,SAAZ;AAAuBC,EAAAA,IAAvB;AAA6BC,EAAAA,QAA7B;AAAuCC,EAAAA;AAAvC,CAAD,KAET,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAEF,IAAb;AAAmB,EAAA,KAAK,EAAEE,KAA1B;AAAiC,EAAA,MAAM,EAAGC,KAAD,IACrC,CAACF,QAAD,GACI,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,GAGI;AACA,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFJ;;AAYA,MAAMC,SAAS,GAAG,CAAC;AAAEN,EAAAA,SAAS,EAAEC,SAAb;AAAwBE,EAAAA,QAAxB;AAAkC,KAAGI;AAArC,CAAD,KACd,oBAAC,KAAD,oBACQA,IADR;AAEI,EAAA,MAAM,EAAIF,KAAK,IACXF,QAAQ,GACJ,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADI,GAGJ;AACA,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADJ;;AAcA,MAAMG,WAAW,GAAG,CAAC;AAAER,EAAAA,SAAS,EAAEC,SAAb;AAAwBE,EAAAA,QAAxB;AAAkC,KAAGI;AAArC,CAAD,KAChB,oBAAC,KAAD,oBACIA,IADJ;AAEA,EAAA,MAAM,EAAIF,KAAK,IACXF,QAAQ,GACJ,oBAAC,SAAD,oBAAeE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADI,GAGJ;AACA,sBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADJ,C,CAcA;AACA;;;AAEA,MAAMI,eAAe,GAAGC,KAAK,KACzB;AAACP,EAAAA,QAAQ,EAAEO,KAAK,CAACC,OAAN,CAAcC;AAAzB,CADyB,CAA7B;;AAIA,OAAO,MAAMC,SAAS,GAAGf,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBV,IAAzB,CAAD,CAA5B;AACP,OAAO,MAAMe,cAAc,GAAGhB,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBH,SAAzB,CAAD,CAAjC;AACP,OAAO,MAAMS,cAAc,GAAGjB,UAAU,CAACH,OAAO,CAACc,eAAD,CAAP,CAAyBD,WAAzB,CAAD,CAAjC","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {Route, Redirect, withRouter} from 'react-router-dom';\n\n//passed in from parent component or from mapStateToProps\nconst Auth = ({component: Component, path, loggedIn, exact\n}) => (\n    <Route path={path} exact={exact} render={(props) => (\n        !loggedIn ? (\n            <Component {...props} /> \n        ) : (\n            //Redirect to some page if user if authenticated\n            <Redirect to=\"/\" />\n        )\n    )} />\n);\n\nconst Protected = ({ component: Component, loggedIn, ...rest}) => (\n    <Route  \n        {...rest}\n        render = {props => \n            loggedIn ? (\n                <Component {...props} /> \n            ) : ( \n                //Redirect to the login page if user is already authenticated\n                <Redirect to=\"/login\"/>\n            )\n        }\n    />\n);\n\nconst NavBarRedir = ({ component: Component, loggedIn, ...rest}) => (\n    <Route \n    {...rest}\n    render = {props => \n        loggedIn ? (\n            <Component {...props} /> \n        ) : ( \n            //Redirect to the login page if user is already authenticated\n            <Redirect to=\"/\"/>\n        )\n    }\n    />\n)\n\n//Use the isAuthenticated slice of state to determine whether a user is \n//logged in \n\nconst mapStateToProps = state => (\n    {loggedIn: state.session.isAuthenticated}\n);\n\nexport const AuthRoute = withRouter(connect(mapStateToProps)(Auth));\nexport const ProtectedRoute = withRouter(connect(mapStateToProps)(Protected));\nexport const NavBarRedirect = withRouter(connect(mapStateToProps)(NavBarRedir));"]},"metadata":{},"sourceType":"module"}