{"ast":null,"code":"import { connect } from \"react-redux\";\nimport { selectRandomCafe, calculateDistance, applyExtraFilters } from \"../../util/filters_util\";\nimport { clearCafes, rerollCafes, fetchYelpCafeById } from \"../../actions/cafe_actions\";\nimport Cafe from '../cafe/cafe'; // const mapStateToProps = state => {\n//     let cafes = Object.values(state.entities.cafes);\n//     let filters = state.entities.filters;\n//     let cafesDistance = calculateDistance(cafes)\n//     let filteredCafes = applyExtraFilters(cafesDistance)\n//     //Get random Yelp Cafe before coming into Props\n//     let randomCafe = selectRandomCafe(Object.values(state.entities.cafes))\n//     //This is yelpcafe being pulled from yelp api\n//     debugger\n//     return {\n//         cafes: cafes,\n//         filteredCafes: filteredCafes,\n//         filters: filters,\n//         loading: state.loading.indexLoading,\n//         randomCafe: randomCafe,\n//         yelpCafe: state.entities.yelpCafe,\n//     };\n// }\n// const mapDispatchToProps = dispatch => ({\n//   clearCafes: () => dispatch(clearCafes()),\n//   rerollCafes: cafes => dispatch(rerollCafes(cafes)),\n//   fetchYelpCafeById: id => dispatch(fetchYelpCafeById(id))\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(Cafe);\n\nconst mapStateToProps = state => {\n  let cafes = Object.values(state.entities.cafes);\n  let filters = state.entities.filters;\n  let cafesDistance = calculateDistance(cafesl);\n  let filteredCafes = applyExtraFilters(cafesDistance); //Get random Yelp Cafe before coming into Props\n\n  let randomCafe = selectRandomCafe(Object.values(state.entities.cafes));\n  debugger;\n  return {\n    cafes: cafes,\n    filters: state.entities.filters,\n    loading: state.loading.indexLoading,\n    yelpCafe: state.entities.yelpCafe\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  clearCafes: () => dispatch(clearCafes()),\n  rerollCafes: cafes => dispatch(rerollCafes(cafes)),\n  fetchYelpCafeById: id => dispatch(fetchYelpCafeById(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cafe);","map":{"version":3,"sources":["/mnt/c/Users/antr9/Desktop/studypal-master/frontend/src/components/cafe/cafe_container.js"],"names":["connect","selectRandomCafe","calculateDistance","applyExtraFilters","clearCafes","rerollCafes","fetchYelpCafeById","Cafe","mapStateToProps","state","cafes","Object","values","entities","filters","cafesDistance","cafesl","filteredCafes","randomCafe","loading","indexLoading","yelpCafe","mapDispatchToProps","dispatch","id"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,iBAA9C,QAAuE,yBAAvE;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,iBAAlC,QAA2D,4BAA3D;AACA,OAAOC,IAAP,MAAiB,cAAjB,C,CAGA;AAEA;AACA;AACA;AAGA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;;AAUA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAE/B,MAAIC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,QAAN,CAAeH,KAA7B,CAAZ;AACA,MAAII,OAAO,GAAGL,KAAK,CAACI,QAAN,CAAeC,OAA7B;AACA,MAAIC,aAAa,GAAGb,iBAAiB,CAACc,MAAD,CAArC;AACA,MAAIC,aAAa,GAAGd,iBAAiB,CAACY,aAAD,CAArC,CAL+B,CAO/B;;AACA,MAAIG,UAAU,GAAGjB,gBAAgB,CAACU,MAAM,CAACC,MAAP,CAAcH,KAAK,CAACI,QAAN,CAAeH,KAA7B,CAAD,CAAjC;AAEA;AACA,SAAO;AACLA,IAAAA,KAAK,EAAEA,KADF;AAELI,IAAAA,OAAO,EAAEL,KAAK,CAACI,QAAN,CAAeC,OAFnB;AAGLK,IAAAA,OAAO,EAAEV,KAAK,CAACU,OAAN,CAAcC,YAHlB;AAILC,IAAAA,QAAQ,EAAEZ,KAAK,CAACI,QAAN,CAAeQ;AAJpB,GAAP;AAOD,CAlBD;;AAmBA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCnB,EAAAA,UAAU,EAAE,MAAMmB,QAAQ,CAACnB,UAAU,EAAX,CADY;AAEtCC,EAAAA,WAAW,EAAEK,KAAK,IAAIa,QAAQ,CAAClB,WAAW,CAACK,KAAD,CAAZ,CAFQ;AAGtCJ,EAAAA,iBAAiB,EAAEkB,EAAE,IAAID,QAAQ,CAACjB,iBAAiB,CAACkB,EAAD,CAAlB;AAHK,CAAL,CAAnC;;AAOA,eAAexB,OAAO,CAACQ,eAAD,EAAkBc,kBAAlB,CAAP,CAA6Cf,IAA7C,CAAf","sourcesContent":["import { connect } from \"react-redux\";\r\nimport { selectRandomCafe, calculateDistance, applyExtraFilters } from \"../../util/filters_util\"\r\nimport { clearCafes, rerollCafes, fetchYelpCafeById } from \"../../actions/cafe_actions\";\r\nimport Cafe from '../cafe/cafe';\r\n\r\n\r\n// const mapStateToProps = state => {\r\n\r\n//     let cafes = Object.values(state.entities.cafes);\r\n//     let filters = state.entities.filters;\r\n//     let cafesDistance = calculateDistance(cafes)\r\n\r\n\r\n//     let filteredCafes = applyExtraFilters(cafesDistance)\r\n\r\n\r\n\r\n//     //Get random Yelp Cafe before coming into Props\r\n//     let randomCafe = selectRandomCafe(Object.values(state.entities.cafes))\r\n\r\n//     //This is yelpcafe being pulled from yelp api\r\n  \r\n//     debugger\r\n//     return {\r\n//         cafes: cafes,\r\n//         filteredCafes: filteredCafes,\r\n//         filters: filters,\r\n//         loading: state.loading.indexLoading,\r\n//         randomCafe: randomCafe,\r\n//         yelpCafe: state.entities.yelpCafe,\r\n//     };\r\n\r\n// }\r\n\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   clearCafes: () => dispatch(clearCafes()),\r\n//   rerollCafes: cafes => dispatch(rerollCafes(cafes)),\r\n//   fetchYelpCafeById: id => dispatch(fetchYelpCafeById(id))\r\n  \r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Cafe);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\r\n  let cafes = Object.values(state.entities.cafes);\r\n  let filters = state.entities.filters;\r\n  let cafesDistance = calculateDistance(cafesl)\r\n  let filteredCafes = applyExtraFilters(cafesDistance)\r\n\r\n  //Get random Yelp Cafe before coming into Props\r\n  let randomCafe = selectRandomCafe(Object.values(state.entities.cafes))\r\n\r\n  debugger\r\n  return {\r\n    cafes: cafes,\r\n    filters: state.entities.filters,\r\n    loading: state.loading.indexLoading,\r\n    yelpCafe: state.entities.yelpCafe,\r\n  };\r\n\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n  clearCafes: () => dispatch(clearCafes()),\r\n  rerollCafes: cafes => dispatch(rerollCafes(cafes)),\r\n  fetchYelpCafeById: id => dispatch(fetchYelpCafeById(id))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cafe);"]},"metadata":{},"sourceType":"module"}