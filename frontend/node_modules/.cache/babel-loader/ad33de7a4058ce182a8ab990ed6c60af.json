{"ast":null,"code":"import * as SessionAPIUtil from \"../util/session_api_util\";\nimport jwt_decode from 'jwt-decode'; // import SessionErrorsReducer from \"../reducers/session_errors_reducer\";\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const LOGOUT_CURRENT_USER = \"LOGOUT_CURRENT_USER\";\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\";\nexport const RECEIVE_USER_SIGN_IN = 'RECEIVE_USER_SIGN_IN';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\nconst receiveCurrentUser = currentUser => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    currentUser\n  };\n};\n\nconst logoutCurrentUser = () => ({\n  type: LOGOUT_CURRENT_USER\n});\n\nconst receiveErrors = errors => ({\n  type: RECEIVE_ERRORS,\n  errors\n}); //added by Fei\n\n\nconst receiveUserSignIn = currentUser => {\n  return {\n    type: RECEIVE_USER_SIGN_IN,\n    currentUser\n  };\n};\n\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n}; //Fei added different login function\n//Wilson's login function\n// export const login = user => dispatch => (\n//     SessionAPIUtil.login(user) \n//         .then(user => dispatch(receiveCurrentUser(user))),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n//Wilson's sighup function\n// export const signup = () => dispatch =>  (\n//     SessionAPIUTil.signup(user)\n//         .then(user => dispatch(receiveCurrentUser(user))),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n//Fei added a different logout function\n//Wilson's logout function\n// export const logout = user => (\n//     SessionAPIUtil.logout(user) \n//         .then(() => dispatch(logoutCurrentUser())),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n//added by fei\n\nexport const signup = user => dispatch => {\n  return SessionAPIUtil.signup(user).then(user => dispatch(receiveUserSignIn(user)), err => dispatch(receiveErrors(err.response.data)) // .catch(err => dispatch(receiveErrors(err.response.data)))\n  );\n}; //added by fei\n\nexport const login = user => dispatch => {\n  return SessionAPIUtil.login(user).then(res => {\n    //in axios, all of our json data is in data key of response\n    //response carries lot of information\n    const {\n      token\n    } = res.data; //localStorage allows us to save something on client side, so if user refreshes page, loads it in from localStor\n    // if close page, jwtToken still stores there\n\n    localStorage.setItem('jwtToken', token); //set header for future axios requests to pass along that json web token to backend to be authenticated\n\n    SessionAPIUtil.setAuthToken(token); //decoded contains all the data we get back from API\n    //res.data.token is the => is the json web token we are passing into jwt decode function\n\n    const decoded = jwt_decode(token);\n    dispatch(receiveCurrentUser(decoded));\n  }).catch(err => {\n    dispatch(receiveErrors(err.response.data));\n  });\n}; //added by fei\n// 1) remove jwtkey from localstorage 2) need to take jwt authHeader off of axios as a default\n// 3) get user out of redux store\n\nexport const logout = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  SessionAPIUtil.setAuthToken(false);\n  dispatch(logoutCurrentUser());\n};","map":{"version":3,"sources":["/mnt/c/Users/antr9/Desktop/studypal-master/frontend/src/actions/session_actions.js"],"names":["SessionAPIUtil","jwt_decode","RECEIVE_CURRENT_USER","LOGOUT_CURRENT_USER","RECEIVE_ERRORS","RECEIVE_USER_SIGN_IN","CLEAR_ERRORS","receiveCurrentUser","currentUser","type","logoutCurrentUser","receiveErrors","errors","receiveUserSignIn","clearErrors","signup","user","dispatch","then","err","response","data","login","res","token","localStorage","setItem","setAuthToken","decoded","catch","logout","removeItem"],"mappings":"AAAA,OAAO,KAAKA,cAAZ,MAAgC,0BAAhC;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;;AAEP,MAAMC,kBAAkB,GAAIC,WAAD,IAAiB;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAEP,oBADH;AAEHM,IAAAA;AAFG,GAAP;AAIH,CALD;;AAOA,MAAME,iBAAiB,GAAG,OAAO;AAC7BD,EAAAA,IAAI,EAAEN;AADuB,CAAP,CAA1B;;AAIA,MAAMQ,aAAa,GAAGC,MAAM,KAAK;AAC7BH,EAAAA,IAAI,EAAEL,cADuB;AAE7BQ,EAAAA;AAF6B,CAAL,CAA5B,C,CAKA;;;AACA,MAAMC,iBAAiB,GAAIL,WAAD,IAAiB;AACvC,SAAO;AACPC,IAAAA,IAAI,EAAEJ,oBADC;AAEPG,IAAAA;AAFO,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMM,WAAW,GAAG,MAAM;AAC7B,SAAO;AACHL,IAAAA,IAAI,EAACH;AADF,GAAP;AAGH,CAJM,C,CAMP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMS,MAAM,GAAKC,IAAD,IAAUC,QAAQ,IAAI;AAEzC,SACIjB,cAAc,CAACe,MAAf,CAAsBC,IAAtB,EACKE,IADL,CACWF,IAAD,IAAUC,QAAQ,CAACJ,iBAAiB,CAACG,IAAD,CAAlB,CAD5B,EAEIG,GAAG,IAAKF,QAAQ,CAACN,aAAa,CAACQ,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAFpB,CAGI;AAHJ,GADJ;AAOH,CATM,C,CAWP;;AACA,OAAO,MAAMC,KAAK,GAAIN,IAAD,IAAUC,QAAQ,IAAI;AAEvC,SAAOjB,cAAc,CAACsB,KAAf,CAAqBN,IAArB,EAA2BE,IAA3B,CAAgCK,GAAG,IAAI;AAC1C;AACA;AACA,UAAM;AAACC,MAAAA;AAAD,QAAUD,GAAG,CAACF,IAApB,CAH0C,CAI1C;AACA;;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAN0C,CAQ1C;;AACAxB,IAAAA,cAAc,CAAC2B,YAAf,CAA4BH,KAA5B,EAT0C,CAU1C;AACA;;AACA,UAAMI,OAAO,GAAG3B,UAAU,CAACuB,KAAD,CAA1B;AAEAP,IAAAA,QAAQ,CAACV,kBAAkB,CAACqB,OAAD,CAAnB,CAAR;AACH,GAfM,EAgBNC,KAhBM,CAgBAV,GAAG,IAAI;AAACF,IAAAA,QAAQ,CAACN,aAAa,CAACQ,GAAG,CAACC,QAAJ,CAAaC,IAAd,CAAd,CAAR;AACd,GAjBM,CAAP;AAkBH,CApBM,C,CAsBP;AACA;AACA;;AACA,OAAO,MAAMS,MAAM,GAAG,MAAMb,QAAQ,IAAI;AAEpCQ,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA/B,EAAAA,cAAc,CAAC2B,YAAf,CAA4B,KAA5B;AACAV,EAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACH,CALM","sourcesContent":["import * as SessionAPIUtil from \"../util/session_api_util\";\nimport jwt_decode from 'jwt-decode';\n// import SessionErrorsReducer from \"../reducers/session_errors_reducer\";\n\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport const LOGOUT_CURRENT_USER = \"LOGOUT_CURRENT_USER\";\nexport const RECEIVE_ERRORS = \"RECEIVE_ERRORS\";\nexport const RECEIVE_USER_SIGN_IN = 'RECEIVE_USER_SIGN_IN';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\nconst receiveCurrentUser = (currentUser) => {\n    return({\n        type: RECEIVE_CURRENT_USER,\n        currentUser\n    });\n};\n\nconst logoutCurrentUser = () => ({\n    type: LOGOUT_CURRENT_USER\n});\n\nconst receiveErrors = errors => ({\n    type: RECEIVE_ERRORS,\n    errors\n});\n\n//added by Fei\nconst receiveUserSignIn = (currentUser) => {\n    return({\n    type: RECEIVE_USER_SIGN_IN,\n    currentUser\n});\n};\n\nexport const clearErrors = () => {\n    return({\n        type:CLEAR_ERRORS\n    })\n}\n\n//Fei added different login function\n//Wilson's login function\n// export const login = user => dispatch => (\n//     SessionAPIUtil.login(user) \n//         .then(user => dispatch(receiveCurrentUser(user))),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n\n//Wilson's sighup function\n// export const signup = () => dispatch =>  (\n//     SessionAPIUTil.signup(user)\n//         .then(user => dispatch(receiveCurrentUser(user))),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n\n//Fei added a different logout function\n//Wilson's logout function\n// export const logout = user => (\n//     SessionAPIUtil.logout(user) \n//         .then(() => dispatch(logoutCurrentUser())),\n//         err => dispatch(receiveErrors(err.responseJSON))\n// );\n\n//added by fei\nexport const signup  = (user) => dispatch => {\n     \n    return(\n        SessionAPIUtil.signup(user)\n            .then((user) => dispatch(receiveUserSignIn(user)),\n            err => (dispatch(receiveErrors(err.response.data)))\n            // .catch(err => dispatch(receiveErrors(err.response.data)))\n        )\n    );\n};\n\n//added by fei\nexport const login = (user) => dispatch => {\n     \n    return SessionAPIUtil.login(user).then(res => {\n        //in axios, all of our json data is in data key of response\n        //response carries lot of information\n        const {token} = res.data;\n        //localStorage allows us to save something on client side, so if user refreshes page, loads it in from localStor\n        // if close page, jwtToken still stores there\n        localStorage.setItem('jwtToken', token);\n\n        //set header for future axios requests to pass along that json web token to backend to be authenticated\n        SessionAPIUtil.setAuthToken(token); \n        //decoded contains all the data we get back from API\n        //res.data.token is the => is the json web token we are passing into jwt decode function\n        const decoded = jwt_decode(token);\n         \n        dispatch(receiveCurrentUser(decoded));\n    })\n    .catch(err => {dispatch(receiveErrors(err.response.data));\n    });\n};\n\n//added by fei\n// 1) remove jwtkey from localstorage 2) need to take jwt authHeader off of axios as a default\n// 3) get user out of redux store\nexport const logout = () => dispatch => {\n     \n    localStorage.removeItem('jwtToken');\n    SessionAPIUtil.setAuthToken(false);\n    dispatch(logoutCurrentUser());\n};\n"]},"metadata":{},"sourceType":"module"}