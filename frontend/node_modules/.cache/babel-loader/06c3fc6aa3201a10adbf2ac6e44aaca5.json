{"ast":null,"code":"export const distance = (lat1, lon1, lat2, lon2, unit) => {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    var radlat1 = Math.PI * lat1 / 180;\n    var radlat2 = Math.PI * lat2 / 180;\n    var theta = lon1 - lon2;\n    var radtheta = Math.PI * theta / 180;\n    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n\n    if (dist > 1) {\n      dist = 1;\n    }\n\n    dist = Math.acos(dist);\n    dist = dist * 180 / Math.PI;\n    dist = dist * 60 * 1.1515;\n\n    if (unit == \"K\") {\n      dist = dist * 1.609344;\n    }\n\n    if (unit == \"N\") {\n      dist = dist * 0.8684;\n    }\n\n    return dist;\n  }\n};\nexport const applyExtraFilters = cafe_array => {\n  // Matches filters coming in from data to match filter params\n  let loudMap = {\n    \"loud\": false,\n    \"average\": true,\n    \"quiet\": true\n  };\n  let creditMap = {\n    \"yes\": true,\n    \"no\": false,\n    \"\": false\n  };\n  let wifiMap = {\n    \"yes\": true,\n    \"no\": false,\n    \"\": false\n  };\n\n  let emptyFilter = cafes => cafes.filter(cafe => cafe.wifi !== '');\n\n  let wifiFilter = cafes => cafes.filter(cafe => wifiMap[cafe.wifi] === this.props.filters.free_wifi);\n\n  let creditFilter = cafes => cafes.filter(cafe => creditMap[cafe.credit_card] === this.props.filters.credit_card);\n\n  let loudFilter = cafes => cafes.filter(cafe => loudMap[cafe.noise_level] === this.props.filters.noise_level); // Apply all filters, looks ugly right now will change later\n\n\n  return emptyFilter(wifiFilter(creditFilter(loudFilter(cafe_array))));\n};\nexport default distance;","map":{"version":3,"sources":["/mnt/c/Users/antr9/Desktop/studypal-master/frontend/src/util/distance_util.js"],"names":["distance","lat1","lon1","lat2","lon2","unit","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","applyExtraFilters","cafe_array","loudMap","creditMap","wifiMap","emptyFilter","cafes","filter","cafe","wifi","wifiFilter","props","filters","free_wifi","creditFilter","credit_card","loudFilter","noise_level"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,IAAzB,KAAmC;AACvD,MAAKJ,IAAI,IAAIE,IAAT,IAAmBD,IAAI,IAAIE,IAA/B,EAAsC;AAClC,WAAO,CAAP;AACH,GAFD,MAGK;AACD,QAAIE,OAAO,GAAGC,IAAI,CAACC,EAAL,GAAUP,IAAV,GAAiB,GAA/B;AACA,QAAIQ,OAAO,GAAGF,IAAI,CAACC,EAAL,GAAUL,IAAV,GAAiB,GAA/B;AACA,QAAIO,KAAK,GAAGR,IAAI,GAAGE,IAAnB;AACA,QAAIO,QAAQ,GAAGJ,IAAI,CAACC,EAAL,GAAUE,KAAV,GAAkB,GAAjC;AACA,QAAIE,IAAI,GAAGL,IAAI,CAACM,GAAL,CAASP,OAAT,IAAoBC,IAAI,CAACM,GAAL,CAASJ,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASR,OAAT,IAAoBC,IAAI,CAACO,GAAL,CAASL,OAAT,CAApB,GAAwCF,IAAI,CAACO,GAAL,CAASH,QAAT,CAA3F;;AACA,QAAIC,IAAI,GAAG,CAAX,EAAc;AACVA,MAAAA,IAAI,GAAG,CAAP;AACH;;AACDA,IAAAA,IAAI,GAAGL,IAAI,CAACQ,IAAL,CAAUH,IAAV,CAAP;AACAA,IAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAaL,IAAI,CAACC,EAAzB;AACAI,IAAAA,IAAI,GAAGA,IAAI,GAAG,EAAP,GAAY,MAAnB;;AACA,QAAIP,IAAI,IAAI,GAAZ,EAAiB;AAAEO,MAAAA,IAAI,GAAGA,IAAI,GAAG,QAAd;AAAwB;;AAC3C,QAAIP,IAAI,IAAI,GAAZ,EAAiB;AAAEO,MAAAA,IAAI,GAAGA,IAAI,GAAG,MAAd;AAAsB;;AACzC,WAAOA,IAAP;AACH;AACJ,CApBM;AAsBP,OAAO,MAAMI,iBAAiB,GAAIC,UAAD,IAAgB;AAE3C;AACA,MAAIC,OAAO,GAAG;AAAE,YAAQ,KAAV;AAAiB,eAAW,IAA5B;AAAkC,aAAS;AAA3C,GAAd;AACA,MAAIC,SAAS,GAAG;AAAE,WAAO,IAAT;AAAe,UAAM,KAArB;AAA4B,QAAI;AAAhC,GAAhB;AACA,MAAIC,OAAO,GAAG;AAAE,WAAO,IAAT;AAAe,UAAM,KAArB;AAA4B,QAAI;AAAhC,GAAd;;AAEA,MAAIC,WAAW,GAAGC,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,EAAnC,CAA3B;;AACA,MAAIC,UAAU,GAAGJ,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAI,IAAIJ,OAAO,CAACI,IAAI,CAACC,IAAN,CAAP,KAAuB,KAAKE,KAAL,CAAWC,OAAX,CAAmBC,SAA/D,CAA1B;;AACA,MAAIC,YAAY,GAAGR,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAI,IAAIL,SAAS,CAACK,IAAI,CAACO,WAAN,CAAT,KAAgC,KAAKJ,KAAL,CAAWC,OAAX,CAAmBG,WAAxE,CAA5B;;AACA,MAAIC,UAAU,GAAGV,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,IAAI,IAAIN,OAAO,CAACM,IAAI,CAACS,WAAN,CAAP,KAA8B,KAAKN,KAAL,CAAWC,OAAX,CAAmBK,WAAtE,CAA1B,CAV2C,CAa3C;;;AACA,SAAOZ,WAAW,CAACK,UAAU,CAACI,YAAY,CAACE,UAAU,CAACf,UAAD,CAAX,CAAb,CAAX,CAAlB;AAEH,CAhBI;AAkBP,eAAejB,QAAf","sourcesContent":["export const distance = (lat1, lon1, lat2, lon2, unit)  => {\r\n    if ((lat1 == lat2) && (lon1 == lon2)) {\r\n        return 0;\r\n    }\r\n    else {\r\n        var radlat1 = Math.PI * lat1 / 180;\r\n        var radlat2 = Math.PI * lat2 / 180;\r\n        var theta = lon1 - lon2;\r\n        var radtheta = Math.PI * theta / 180;\r\n        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\r\n        if (dist > 1) {\r\n            dist = 1;\r\n        }\r\n        dist = Math.acos(dist);\r\n        dist = dist * 180 / Math.PI;\r\n        dist = dist * 60 * 1.1515;\r\n        if (unit == \"K\") { dist = dist * 1.609344 }\r\n        if (unit == \"N\") { dist = dist * 0.8684 }\r\n        return dist;\r\n    }\r\n}\r\n\r\nexport const applyExtraFilters = (cafe_array) => {\r\n\r\n      // Matches filters coming in from data to match filter params\r\n      let loudMap = { \"loud\": false, \"average\": true, \"quiet\": true };\r\n      let creditMap = { \"yes\": true, \"no\": false, \"\": false };\r\n      let wifiMap = { \"yes\": true, \"no\": false, \"\": false };\r\n\r\n      let emptyFilter = cafes => cafes.filter(cafe => cafe.wifi !== '');\r\n      let wifiFilter = cafes => cafes.filter(cafe => wifiMap[cafe.wifi] === this.props.filters.free_wifi);\r\n      let creditFilter = cafes => cafes.filter(cafe => creditMap[cafe.credit_card] === this.props.filters.credit_card);\r\n      let loudFilter = cafes => cafes.filter(cafe => loudMap[cafe.noise_level] === this.props.filters.noise_level);\r\n\r\n    \r\n      // Apply all filters, looks ugly right now will change later\r\n      return emptyFilter(wifiFilter(creditFilter(loudFilter(cafe_array))))\r\n      \r\n  }\r\n\r\nexport default distance;"]},"metadata":{},"sourceType":"module"}